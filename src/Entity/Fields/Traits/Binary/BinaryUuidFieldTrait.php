<?php declare(strict_types=1);

namespace EdmondsCommerce\DoctrineStaticMeta\Entity\Fields\Traits\Binary;

use Doctrine\ORM\Mapping\Builder\ClassMetadataBuilder;
use Doctrine\ORM\Mapping\Builder\FieldBuilder;
use EdmondsCommerce\DoctrineStaticMeta\Entity\Fields\Interfaces\Binary\BinaryUuidFieldInterface;
use EdmondsCommerce\DoctrineStaticMeta\MappingHelper;
use Ramsey\Uuid\UuidInterface;

/**
 * Trait BinaryUuidFieldTrait
 *
 * This field allows you to set a UUID that is generated elsewhere than the database.
 * This is as opposed to using a UUID primary key which is generated by the database
 * - eg
 * \EdmondsCommerce\DoctrineStaticMeta\Entity\Fields\Traits\PrimaryKey\UuidFieldTrait
 */
trait BinaryUuidFieldTrait
{

    /**
     * @var UuidInterface|null
     */
    private $binaryUuid;

    /**
     * @SuppressWarnings(PHPMD.StaticAccess)
     * @param ClassMetadataBuilder $builder
     */
    public static function metaForBinaryUuid(ClassMetadataBuilder $builder): void
    {
        $columnName   = MappingHelper::getColumnNameForField(
            BinaryUuidFieldInterface::PROP_BINARY_UUID
        );
        $fieldBuilder = new FieldBuilder(
            $builder,
            [
                'fieldName' => BinaryUuidFieldInterface::PROP_BINARY_UUID,
                'type'      => MappingHelper::TYPE_UUID,
            ]
        );
        $fieldBuilder->columnName($columnName)
                     ->nullable()
                     ->unique(false)
                     ->build();
        $builder->addIndex([$columnName], $columnName . '_idx');
    }

    /**
     * @return UuidInterface|null
     */
    public function getBinaryUuid(): ?UuidInterface
    {
        return $this->binaryUuid;
    }

    /**
     * @param UuidInterface $binaryUuid
     *
     * @return self
     */
    private function setBinaryUuid(?UuidInterface $binaryUuid): self
    {
        $this->updatePropertyValue(
            BinaryUuidFieldInterface::PROP_BINARY_UUID,
            $binaryUuid
        );

        return $this;
    }
}
